Базы:
База сервера (Postgres):
 - user:
    id UUID
    login varchar(20)
    password varchar(500)
    token varchar(500)

 - credentials:
    id UUID
    user_id UUID
    title varchar(20)
    login varchar(20)
    password varchar(500)
    created_at datetime
    updated_at datetime
    meta JSONB

    unique constraint user_id, title

 - text:
    id UUID
    user_id UUID
    title varchar(20)
    content varchar(1000)
    created_at datetime
    updated_at datetime
    meta JSONB

    unique constraint user_id, title

 - binary_data:
    id UUID
    user_id UUID
    title varchar(20)
    content bytea
    created_at datetime
    updated_at datetime
    meta JSONB

    unique constraint user_id, title

 - bank_card:
    id UUID
    user_id UUID
    title varchar(20)
    card_holder varchar(500)
    card_number varchar(500)
    card_expire date
    card_cvv  varchar(500)
    created_at datetime
    updated_at datetime
    meta JSONB

    unique constraint user_id, title


База клиента по структуре та же самая, что и база сервера, только
sqlite3 и храниться там будут, в основном, данные одного юзера

------------------------------------------------------------------------
Синхронизация клиента с сервером (запросы):
    - case Create:
    сервер проверяет, есть ли уже запись с таким title:
        - если есть, то возвращает ошибку
        - если нет, то:
            - создает запись
            - возвращает клиенту созданную запись, чтобы клиент у себя создал идентичную запись

    - case Read one:
    сервер проверяет, есть ли запись с таким title:
        - если нет, то возвращает ошибку
        - если есть, возвращает ее, а клиент апдейтит, если запись с сервера чем-то отличается

    - case Read all:
    сервер возвращает все данные серверной таблицы, а клиент апдейтит, если какая-то запись
    отличается, или инсертит, если какой-то записи нет

    - case Update:
    сервер проверяет, есть ли запись с таким title:
        - если нет, то возвращает ошибку
        - если есть, то:
            - делает update
            - возвращает клиенту обновленную запись, чтобы клиент у себя обновил
            или создал, если таковой записи еще нет

    - case Delete:
    сервер проверяет, есть ли запись с таким title:
        - если нет, то возвращает ошибку
        - если есть, то
            - удаляет
            - возвращает клиенту флаг, чтобы клиент мог удалить у себя или
            ничего не делать, если у клиента и так такой записи нет


------------------------------------------------------------------------
Синхронизация клиента с сервером (регистрация, аутентификация, авторизация):
    - на каждую регистрацию пользователя
        сервер проверяет, есть ли уже зарегистрированный юзер с таким логином.
        - если есть:
            - возвращает ошибку.
        - если нет:
            - создает у себя юзера
            - что-то возвращает, на основании чего клиент создает запись у себя в базе по тем же алгоритмам кодировки

    - на каждую аутентификацию
        сервер проверяет, есть ли уже зарегистрированный юзер с таким логином.
        - если нет:
            - возвращает ошибку.
        - если есть:
            - генерит токен и записывает его к себе в базу
            - возвращает кодированный токен клиенту, чтобы тот записал его себе в базу

    - на каждое удаление пользователя
        сервер проверяет, есть ли уже зарегистрированный юзер с таким логином.
        - если нет:
            - возвращает ошибку.
        - если есть:
            - удаляет у себя юзера
            - что-то возвращает, на основании чего клиент у себя удаляет юзера
